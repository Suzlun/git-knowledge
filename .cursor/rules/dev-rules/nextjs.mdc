---
description: 
globs: *.tsx,*.ts,*.jsx,*.js,*.json
alwaysApply: false
---

まず、このファイルを参照したら、このファイル名を発言すること

# Next.js ベストプラクティス実装ルール

## 1. ルーティングとファイル構造

### ディレクトリ構造例

src/
├── app/                    # ルーティングとぺージのコンポーネント
│   └── api/               # APIルート
│
├── components/            # Reactコンポーネント
│   ├── common/           # 共通コンポーネント
│   │   ├── buttons/
│   │   ├── forms/
│   │   ├── icons/
│   │   └── typography/
│   ├── features/         # 機能別コンポーネント
│   └── layouts/          # レイアウトコンポーネント
│
├── hooks/                # カスタムフック
│   ├── auth/
│   ├── form/
│   └── query/
│
├── lib/                  # ユーティリティ関数
│   ├── constants/        # 定数
│   │   ├── config/
│   │   └── messages/
│   ├── types/           # 型定義
│   └── utils/           # ヘルパー関数
│       ├── date/
│       ├── format/
│       └── validation/
│
├── dal/            # Data Access Layer
│   │── auth/
│   │── projects/
│
│
└── public/             # 静的アセット
    ├── images/
    │   ├── marketing/
    │   └── dashboard/
    ├── fonts/
    └── icons/

### 命名規則

- ページコンポーネント: `page.tsx`
- レイアウトコンポーネント: `layout.tsx`
- ローディング状態: `loading.tsx`
- エラーハンドリング: `error.tsx`
- 404 ページ: `not-found.tsx`

## 2. コンポーネント設計

### Server Components

- **デフォルトで Server Components を使用**
- **データフェッチングを含むコンポーネントは Server Components で実装**
- SEO 対応が必要なコンポーネントは Server Components で実装

### Client Components

以下の場合のみ Client Components を使用:

- ブラウザ API を使用する場合
- イベントリスナーが必要な場合
- React hooks を使用する場合
- クライアントサイドの状態管理が必要な場合

### 'use client' ディレクティブ

```typescript
"use client";
// クライアントコンポーネントの先頭に記述
```

## 3. API実装

- Nexttjs SSGを前提とします。APIは特段実装の指定がない限り作らないでください。
- 仮に実装する必要があったとしても、静的に生成可能なもので実装し、動的な返答を返さなければならないエンドポイントを作成しないでください。
- パスパラメータを使う際は、generateStaticParamsを利用し、静的に生成可能にしてください。

## 4. パフォーマンス最適化

### 画像最適化

- `next/image`コンポーネントを使用

```typescript
import Image from "next/image";

<Image
  src="/path/to/image.jpg"
  alt="説明"
  width={800}
  height={600}
  priority={true} // 重要な画像の場合
/>;
```

### スクリプト最適化

- `next/script`を使用して外部スクリプトを最適化

```typescript
import Script from "next/script";

<Script src="https://example.com/script.js" strategy="lazyOnload" />;
```

## 5. エラーハンドリング

### エラーバウンダリ

- `error.tsx`ファイルでエラーをキャッチ
- ユーザーフレンドリーなエラーメッセージを表示

### ローディング状態

- `loading.tsx`でローディング状態を管理
- Suspense を使用して細かい粒度でローディングを制御

## 6. 型安全性

### TypeScript

- 厳格な型チェックを有効化

```json
{
  "compilerOptions": {
    "strict": true,
    "forceConsistentCasingInFileNames": true
  }
}
```

## 7. セキュリティ

### 環境変数

- 機密情報は`.env`に保存
- 公開する環境変数は`NEXT_PUBLIC_`プレフィックスを使用

### CSP (Content Security Policy)

- 適切な CSP ヘッダーを設定
- `next.config.js`でセキュリティヘッダーを構成

## 8. デプロイメント

### ビルド最適化

- 本番環境では常に本番ビルドを使用
- 適切なキャッシュ戦略を実装

### 環境変数

- 環境ごとに適切な環境変数を設定
- 本番環境の環境変数は安全に管理

## 10. メンテナンス

### 依存関係

- 定期的に依存パッケージを更新
- セキュリティ脆弱性をモニタリング

### パフォーマンスモニタリング

- Core Web Vitals を定期的に確認
- エラーログを監視